"""

Export and import data for Paraview and Bembel.

Copyright (C) 2022
 
"""

import numpy as np
from pyevtk.vtk import VtkFile, VtkUnstructuredGrid, VtkTriangle, VtkVertex
from pyevtk.evtk import writeBlockSize, writeArrayToFile, writeArraysToFile
import numpy as np
import vtk
from vtk.util.numpy_support import vtk_to_numpy

def _addDataToFile(vtkFile, pointData):
    # Point data
    if pointData is not None:
        keys = list(pointData.keys())
        vtkFile.openData("Point", scalars=keys[0])
        for key in keys:
            data = pointData[key]
            vtkFile.addHeader(key, data.dtype.name, data.shape[0], data.shape[1])
        vtkFile.closeData("Point")



def _appendDataToFile(vtkFile, pointData):
    # Append data to binary section
    if pointData is not None:
        keys = list(pointData.keys())
        for key in keys:
            data = pointData[key]
            vtkFile.appendHeader(data.dtype.name, data.shape[0], data.shape[1])
            writeArrayToFile(vtkFile.xml.stream, data.flatten())



def triangle_faces_to_VTK(filename, x, y, z, faces, point_data):
    vertices = (x, y, z)

    w = VtkFile(filename, VtkUnstructuredGrid)
    w.openGrid()
    w.openPiece(npoints=len(x), ncells=len(faces))
    w.openElement("Points")
    w.addData("Points", vertices)
    w.closeElement("Points")

    # Create some temporary arrays to write grid topology.
    ncells = len(faces)
    # Index of last node in each cell.
    offsets = np.arange(start=3, stop=3*(ncells + 1), step=3, dtype='uint32')
    # Connectivity as unrolled array.
    connectivity = faces.reshape(ncells*3).astype('int32')
    cell_types = np.ones(ncells, dtype='uint8')*VtkTriangle.tid

    w.openElement("Cells")
    w.addData("connectivity", connectivity)
    w.addData("offsets", offsets)
    w.addData("types", cell_types)
    w.closeElement("Cells")

    _addDataToFile(w, pointData=point_data)

    w.closePiece()
    w.closeGrid()

    w.appendData(vertices)
    w.appendData(connectivity).appendData(offsets).appendData(cell_types)

    _appendDataToFile(w, pointData=point_data)

    w.save()
    return w.getFileName()

def read_vtk_file(vtk_file):
    reader = None
    if vtk_file.endswith(".vtu"):
        reader = vtk.vtkXMLUnstructuredGridReader()
    elif vtk_file.endswith(".vtp"):
        reader = vtk.vtkXMLPolyDataReader()
    elif vtk_file.endswith(".vts"):
        reader = vtk.vtkXMLStructuredGridReader()
    elif vtk_file.endswith(".vti"):
        reader = vtk.vtkXMLImageDataReader()
    reader.SetFileName(vtk_file)
    reader.Update()
    vtk_dataset = reader.GetOutput()
    cells = vtk_dataset.GetPolys()
    nCells = cells.GetNumberOfCells()
    cell_array = cells.GetData()
    nCols = cell_array.GetNumberOfValues()//nCells
    numpy_cells = vtk_to_numpy(cell_array)
    numpy_cells = numpy_cells.reshape((-1,nCols))
    points = vtk_dataset.GetPoints()
    point_array = points.GetData()
    numpy_points = vtk_to_numpy(point_array)
    return numpy_points, numpy_cells

def write_to_bembel(degree_us, degree_vs, kv_us, kv_vs, ctrlpts_size_us, ctrlpts_size_vs, ctrlpts, weights, output):
    ### Write geometry to .dat file for Bembel ###
    num_patches = len(degree_us)
    bembel_file = open(output, 'w')
    bembel_file.write("# nurbs mesh v.2.1 \n")
    bembel_file.write("# " + output + " \n")
    bembel_file.write("# Generated by BEMBEL, see www.bembel.eu \n")
    bembel_file.write("# \n")
    bembel_file.write("2 3 {} 0 0 \n".format(num_patches))
    for i in range(num_patches):
        bembel_file.write("PATCH {} \n".format(i))
        bembel_file.write("{0} {1} \n".format(degree_us[i], degree_vs[i]))
        bembel_file.write("{0} {1} \n".format(ctrlpts_size_us[i], ctrlpts_size_vs[i]))
        bembel_file.write("   ".join("{:.16f}".format(item) for item in kv_us[i]) + " \n")
        bembel_file.write("   ".join("{:.16f}".format(item) for item in kv_vs[i]) + " \n")
        for coord in np.array(ctrlpts[i]):
            bembel_file.write("   ".join("{:.16f}".format(item) for item in coord) + " \n")
        bembel_file.write("   ".join("{:.16f}".format(item) for item in weights[i]) + " \n")

    bembel_file.close()
